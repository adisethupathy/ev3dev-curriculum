

"""
Author: Tyler foster
"""
import traceback
import math
import ev3dev.ev3 as ev3
import time
import robot_controller as robo
import tkinter
from tkinter import ttk
import mqtt_remote_method_calls as com


#class DataContainer(object):
#    def __init__(self):
#        self.running = True


class MyDelegate(object):

    def __init__(self, canvas):
        self.canvas = canvas


def main():
    print("--------------------------------------------")
    print("Final Project")
    print("--------------------------------------------")
    robot = robo.Snatch3r()

    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()
#    dc = DataContainer()

    root = tkinter.Tk()
    root.title("Final Project")

    main_frame = ttk.Frame(root, padding=20, relief='raised')
    main_frame.grid()

    points = 0
    left_speed = 300
    right_speed = 300

    """amount of points won"""
    #if robot.color_sensor.color == ev3.ColorSensor.COLOR_RED:
     #   ev3.Sound.speak("10 points")
      #  points = points + 10

    score = "points ="

    label = ttk.Label(main_frame, text=(score, points))
    label.grid(columnspan=2)

    # Make callbacks for the three buttons.
    clear_button = ttk.Button(main_frame, text="Restart")
    clear_button.grid(row=3, column=1)
    clear_button["command"] = lambda: stop(mqtt_client)

    start_button = ttk.Button(main_frame, text="Start")
    start_button.grid(row=3, column=0)
    start_button["command"] = lambda: forward(mqtt_client, left_speed, right_speed)

    root.bind('<Left>', lambda event: left(mqtt_client, left_speed))
    root.bind('<Right>', lambda event: right(mqtt_client, right_speed))
    root.bind('<Up>', lambda event: forward(mqtt_client, left_speed, right_speed))

    quit_button = ttk.Button(main_frame, text="Quit Game")
    quit_button.grid(row=3, column=2)
    quit_button["command"] = lambda: quit_program(mqtt_client)

   # while robot.forward(300, 300):
    #    current_color = ev3.ColorSensor.color
      #  if current_color == ev3.ColorSensor.COLOR_BLACK:
     #       robot.stop()
    #if robot.touch_sensor.is_pressed:
     #   lambda: stop(mqtt_client)

    root.mainloop()

    """turning left or right"""

    """stops robot if goes over black"""
    current_color = ev3.ColorSensor.COLOR_BLACK
    if current_color == ev3.ColorSensor.COLOR_BLACK:
        ev3.Sound.speak("game over")
        robot.stop()
#canvas.create_text(90, 90, text="game over")


def clear(canvas):
    """Clears the canvas contents"""
    canvas.delete("all")


def quit_program(mqtt_client):
    """For best practice you should close the connection.  Nothing really "bad" happens if you
       forget to close the connection though. Still it seems wise to close it then exit."""
    if mqtt_client:
        mqtt_client.close()
    exit()


def forward(mqtt_client, left_speed, right_speed):
    print('forward')
    mqtt_client.send_message("forward", [left_speed, right_speed])


def left(mqtt_client, left_speed):
    print('left')
    mqtt_client.send_message("left", [left_speed])


def stop(mqtt_client):
    print('stop')
    mqtt_client.send_message("stop")


def right(mqtt_client, right_speed):
    print('right')
    mqtt_client.send_message("right", [right_speed])


main()
"""gets that young ball rolling dude"""
