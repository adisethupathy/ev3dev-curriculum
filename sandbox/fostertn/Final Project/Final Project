

"""
Author: Tyler foster
"""
import tkinter
from tkinter import ttk
import mqtt_remote_method_calls as com
import ev3dev.ev3 as ev3
import time
import traceback
import math

points = 0


class MyDelegate(object):
    def __init__(self, main_frame):
        self.running = True
        self.main_frame = main_frame
        label = ttk.Label(self.main_frame, text="Points: 0")
        label.grid(columnspan=2)

    def sendPoints(self):
        global points
        points = 10 + points
        label = ttk.Label(self.main_frame, text="Points:" + str(points))
        label.grid(columnspan=2)

    def gameover(self):
        label = ttk.Label(self.main_frame, text="Game Over!")
        label.grid(columnspan=2)



def main():
    print("--------------------------------------------")
    print("Final Project")
    print("--------------------------------------------")

    root = tkinter.Tk()
    root.title("Final Project")

    main_frame = ttk.Frame(root, padding=20, relief='raised')
    main_frame.grid()
    left_speed = 300
    right_speed = 300

    # Make callbacks for the three buttons.
    clear_button = ttk.Button(main_frame, text="Restart")
    clear_button.grid(row=3, column=1)
    clear_button["command"] = lambda: stop(mqtt_client)

    start_button = ttk.Button(main_frame, text="Start")
    start_button.grid(row=3, column=0)
    start_button["command"] = lambda: forward(mqtt_client, left_speed, right_speed)

    root.bind('<Left>', lambda event: left(mqtt_client, left_speed))
    root.bind('<Right>', lambda event: right(mqtt_client, right_speed))
    root.bind('<Up>', lambda event: forward(mqtt_client, left_speed, right_speed))
    root.bind('<Down>', lambda event: stop(mqtt_client))

    quit_button = ttk.Button(main_frame, text="Quit Game")
    quit_button.grid(row=3, column=2)
    quit_button["command"] = lambda: quit_program(mqtt_client)

    my_delegate = MyDelegate(main_frame)
    mqtt_client = com.MqttClient(my_delegate)
    mqtt_client.connect_to_ev3()

    root.mainloop()


def clear(canvas):
    """Clears the canvas contents"""
    canvas.delete("all")


def quit_program(mqtt_client):
    """For best practice you should close the connection.  Nothing really "bad" happens if you
       forget to close the connection though. Still it seems wise to close it then exit."""
    if mqtt_client:
        mqtt_client.close()
    exit()


def forward(mqtt_client, left_speed, right_speed):
    print('forward')
    mqtt_client.send_message("forward", [left_speed, right_speed])


def left(mqtt_client, left_speed):
    print('left')
    mqtt_client.send_message("left", [left_speed])


def stop(mqtt_client):
    print('stop')
    mqtt_client.send_message("stop")


def right(mqtt_client, right_speed):
    print('right')
    mqtt_client.send_message("right", [right_speed])


main()
"""gets that young ball rolling dude"""
